<section>
    <h3 id="stock">Search for a stock</h3>
    <div class="md:flex justify-evenly">
        <input
            type="text"
            id="stock-symbol"
            placeholder="Enter stock symbol"
            class="mr-5"
        />
        <button
            id="stock-submit"
            class="btn bg-[#1eb5cf] hover:bg-[#497981] text-black rounded-md dark:bg-[#1E1F2A] dark:text-white dark:hover:bg-[#394152]"
            >Submit</button
        >
    </div>
    <h4>The data is updated hourly using Financial Modeling Prep's API</h4>

    <div id="stock-search-data"></div>
</section>
<section>
    <h2 class="text-center">Todays Top Movers</h2>
    <div class="md:flex justify-around md:items-center md:w-full">
        <div class="flex flex-col space-x-2">
            <h3 class="text-center">Top Gainers..</h3>
            <div id="gainers" class="items-center max-w-30%">
                <p>Gainers data</p>
            </div>
        </div>
        <div class="flex flex-col space-x-2">
            <h3 class="text-center">Top Losers</h3>
            <div id="losers" class="items-center max-w-30%">
                <p>Losers data..</p>
            </div>
        </div>
        <div class="flex flex-col space-x-2">
            <h3 class="text-center">Most Active</h3>
            <div id="actives" class="items-center max-w-30%">
                <p>Active data..</p>
            </div>
        </div>
    </div>
</section>

<!-- Template for stock data -->
<template id="stock-item-template">
    <div
        class="flex flex-col bg-gray-100 text-black rounded-md mb-2 dark:bg-gray-800 dark:text-white p-2"
    >
        <div class="flex justify-between items-center w-full">
            <div class="flex flex-col items-start">
                <a
                    href="#"
                    class="text--400 hover:underline font-semibold text-sm stock-symbol"
                    id="stock-symbol"
                >
                    SYMBOL
                </a>
                <span
                    class="text-sm text-gray-400 truncate max-w-full stock-name"
                    id="stock-name"
                >
                    Company Name
                </span>
            </div>
            <div class="text-right">
                <div class="text-lg font-bold stock-price" id="stock-price">
                    $0.00
                </div>
                <div class="text-sm stock-change" id="stock-change">
                    0.00 (0.00%)
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    //todo: make constant values using capital letters for easier maintenance
    // get the API key from .env file
    var apiKey = import.meta.env.PUBLIC_STOCKS_API_KEY;
    var symbol = "RR.L"; // example symbol e.g Rolls-Royce on the London Stock Exchange
    const expirationKey = "stockDataExpiration";
    const oneDay = 24 * 60 * 60 * 1000; // 24hrs in milliseconds
    const oneHour = 60 * 60 * 1000; // 1hr in milliseconds

    // used to check for expiration time for cached data
    const cachedExpiration = localStorage.getItem(expirationKey);
    console.log("cachedExpiration initial", cachedExpiration);

    // // function to search for a specific stock and display the data
    async function getStockData() {
        const url = `https://financialmodelingprep.com/stable/profile?symbol=${symbol}&apikey=${apiKey}`;
        const stockContainer = document.querySelector("#stock-search-data");

        if (!stockContainer) return;
        try {
            stockContainer.innerHTML = `<p class="text-center">Loading stock data...</p>`;
            const response = await fetch(url);
            const data = await response.json();

            const stock = data[0];
            if (!stock) {
                stockContainer.innerHTML = `<p class="text-center">No stock data available!</p>`;
                return;
            }
            stockContainer.innerHTML = `
            <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
              <h2 class="text-xl font-bold mb-2">${stock.symbol}</h2>
              <div class="grid grid-cols-2 gap-2 dark:text-white">
                <div class="font-semibold">Price:</div><div>${stock.price}</div>
                <div class="font-semibold">Company:</div><div>${stock.companyName}</div>
                <div class="font-semibold">Exchange:</div><div>${stock.exchangeFullName}</div>
                <div class="font-semibold">Symbol:</div><div>${stock.exchange}</div>
                <div class="font-semibold">Sector:</div><div>${stock.sector}</div>
              </div>
            </div>
          `;
        } catch (error) {
            console.error("Error fetching stock data:", error);
            stockContainer.innerHTML = `<p class="text-center text-red-500">Error loading stock data.</p>`;
        }
    }

    // Single function to fetch data that handles all three data types (currently biggest gainers, losers, and most active)
    async function fetchMarketData(type: string) {
        const cacheKey = `${type}Data`;
        const container = document.querySelector(`#${type}`);

        if (!container) return;

        // Set consistent caching approach
        let data;
        const cachedData = localStorage.getItem(cacheKey);
        const currentExpiration = localStorage.getItem(expirationKey);
        const now = Date.now();

        // Check for valid cached data
        if (
            cachedData &&
            currentExpiration &&
            now < Number(currentExpiration)
        ) {
            console.log(`Loading ${type} data from cache...`);
            data = JSON.parse(cachedData);
        } else {
            // Set new expiration time for all data types
            const newExpiration = now + oneHour;
            localStorage.setItem(expirationKey, newExpiration.toString());

            // Fetch fresh data
            const endpoint =
                type === "gainers"
                    ? "biggest-gainers"
                    : type === "losers"
                      ? "biggest-losers"
                      : "most-actives";

            const url = `https://financialmodelingprep.com/stable/${endpoint}?apikey=${apiKey}`;

            try {
                const response = await fetch(url);
                data = await response.json();

                // Store in cache
                localStorage.setItem(cacheKey, JSON.stringify(data));
            } catch (error) {
                console.error(`Error fetching ${type} data:`, error);
                container.innerHTML = `<p class="text-center text-red-500">Error loading data.</p>`;
                return;
            }
        }

        // Display data
        displayData(data, container);
    }

    //function to display the data into the a html template.
    function displayData(data: string | any[], container: Element) {
        container.innerHTML = ""; // Clear previous content

        //checks if there is any data to display
        if (!Array.isArray(data) || data.length === 0) {
            container.innerHTML = `<p class="text-center">No data available</p>`;
            return;
        }

        //get the html template
        const template = document.getElementById(
            "stock-item-template",
        ) as HTMLTemplateElement;
        //get the top 12 items from the fetched data
        const top12Items = data.slice(0, 12);

        top12Items.forEach((stock) => {
            // Clone the template
            const stockDiv = template.content.cloneNode(
                true,
            ) as DocumentFragment;

            // Update content
            const symbolElement = stockDiv.querySelector(".stock-symbol");
            const nameElement = stockDiv.querySelector(".stock-name");
            const priceElement = stockDiv.querySelector(".stock-price");
            const changeElement = stockDiv.querySelector(
                ".stock-change",
            ) as HTMLElement;

            if (symbolElement) symbolElement.textContent = stock.symbol;
            const stockName =
                stock.name.length > 30
                    ? stock.name.slice(0, 35) + "..."
                    : stock.name;
            if (nameElement) nameElement.textContent = stockName;
            if (priceElement) priceElement.textContent = stock.price;

            // Handle change color and text
            if (changeElement) {
                const isPositive = parseFloat(stock.change) >= 0;
                changeElement.style.color = isPositive ? "#10B981" : "#EF4444"; // green-500 and red-500
                changeElement.textContent = `${stock.change} (${stock.changesPercentage}%)`;
            }

            container.appendChild(stockDiv);
        });
    }

    // Set up event listener for the stock search
    const stockSubmit = document.querySelector("#stock-submit");
    if (stockSubmit) {
        stockSubmit.addEventListener("click", () => {
            const stockSymbol = document.querySelector(
                "#stock-symbol",
            ) as HTMLInputElement;
            if (stockSymbol) {
                symbol = stockSymbol.value;
                getStockData();
            }
            
        });
    }

    // Initialize all data fetching
    document.addEventListener("DOMContentLoaded", () => {
        fetchMarketData("gainers");
        fetchMarketData("losers");
        fetchMarketData("actives");
    });
</script>
